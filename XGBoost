import pandas as pd
import numpy as np
import xgboost as xgb
import matplotlib.pyplot as plt
from sklearn.preprocessing import MinMaxScaler
from datetime import timedelta
import os

# ----------------- File Paths -----------------
input_file = "Prediction models/XGBoost/data for prediction.csv"
output_file = "Prediction models/XGBoost/xgboost_predictions_next5days.csv"
plot_dir = "Prediction models/XGBoost/plots"
os.makedirs(plot_dir, exist_ok=True)

# ----------------- Load & Preprocess Data -----------------
df = pd.read_csv(input_file, parse_dates=["DATE"])
df = df.sort_values(by=["ATM", "DATE"])
df["Date"] = df["DATE"].dt.strftime("%-d-%-m-%Y")

atm_predictions = []
atm_ids = df["ATM"].unique()

for atm in atm_ids:
    atm_df = df[df["ATM"] == atm].copy()
    if len(atm_df) < 10:
        continue

    # Features and target
    features = [
        "DEPOSITS", "Holiday (Yes -1, No -0)",
        "Day of the week", "Day in a month", "Month", "Year"
    ]
    target = "WITHDRWLS"

    # Normalize target and store scaler
    scaler = MinMaxScaler()
    atm_df["WITHDRWLS Scaled"] = scaler.fit_transform(atm_df[[target]])

    X = atm_df[features]
    y = atm_df["WITHDRWLS Scaled"]

    # ----------------- Train Model -----------------
    model = xgb.XGBRegressor(objective='reg:squarederror', n_estimators=100)
    model.fit(X, y)

    # ----------------- Predict Next 5 Days -----------------
    last_date = atm_df["DATE"].max()
    last_known_deposit = atm_df["DEPOSITS"].iloc[-1]
    last_known_holiday = atm_df["Holiday (Yes -1, No -0)"].iloc[-1]

    prediction_dates = []
    predicted_withdrawals = []
    rows = []

    for i in range(1, 6):
        next_date = last_date + timedelta(days=i)
        x_input = pd.DataFrame([{
            "DEPOSITS": last_known_deposit,
            "Holiday (Yes -1, No -0)": last_known_holiday,
            "Day of the week": next_date.dayofweek,
            "Day in a month": next_date.day,
            "Month": next_date.month,
            "Year": next_date.year
        }])

        scaled_pred = model.predict(x_input)[0]
        pred_withdrawal = scaler.inverse_transform([[scaled_pred]])[0][0]

        prediction_dates.append(next_date)
        predicted_withdrawals.append(pred_withdrawal)

        rows.append({
            "ATM": atm,
            "DATE": next_date,
            "DAY": i,
            "WITHDRWLS": pred_withdrawal,
            "ATM capacity": 20000000,
            "CASHP_ID": atm_df["CASHP_ID"].iloc[-1],
            "DEPOSITS": last_known_deposit,
            "WITHDRWLS Scaled": scaled_pred,
            "DEPOSITS Scaled": atm_df["DEPOSITS Scaled"].iloc[-1],
            "Day of the week": next_date.dayofweek,
            "Day in a month": next_date.day,
            "Month": next_date.month,
            "Year": next_date.year,
            "Date": next_date.strftime("%-d-%-m-%Y"),
            "Holiday (Yes -1, No -0)": last_known_holiday,
            "Avg daily withdrawal per ATM": atm_df["WITHDRWLS"].mean(),
            "Predicted_WITHDRWLS": pred_withdrawal
        })

    atm_predictions.append(pd.DataFrame(rows))

    # ----------------- Plot -----------------
    plt.figure(figsize=(10, 5))
    plt.plot(prediction_dates, predicted_withdrawals, marker='o', linestyle='-', color='orange')
    plt.title(f"ATM {atm} - 5-Day Withdrawal Forecast (XGBoost)")
    plt.xlabel("Date")
    plt.ylabel("WITHDRWLS")
    plt.xticks(rotation=45)
    plt.grid(True)
    plt.tight_layout()
    plt.savefig(f"{plot_dir}/ATM_{atm}_forecast.png")
    plt.close()

# ----------------- Save Output -----------------
if atm_predictions:
    result_df = pd.concat(atm_predictions, ignore_index=True)
    result_df.to_csv(output_file, index=False)
    print(f"âœ… Predictions saved to: {output_file}")
    print(f"ðŸ“Š Plots saved in: {plot_dir}")
else:
    print("ðŸš« No predictions were generated.")
